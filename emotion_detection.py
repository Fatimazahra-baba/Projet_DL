# -*- coding: utf-8 -*-
"""Emotion_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10nlkFElNCijAMQRV7dZOvrSyrNgNOVeo
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install -q keras

"""***Importer les libraries***"""

import tensorflow as tf
import keras
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D, Activation,BatchNormalization
from keras.utils import to_categorical
from tensorflow.keras import activations
from keras.preprocessing import image
from tensorflow.keras import datasets, layers, models
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from keras.utils import to_categorical

"""***Telecharger notre dataset :***"""

train_path = '/content/drive/My Drive/train set'
validation_path = '/content/drive/My Drive/validation dataset'

"""***import the images from the dataset***"""

num_classes = 5
img_rows,img_cols = 48,48
batch_size = 32  

train_datagen = ImageDataGenerator(
					rescale=1./255,
					rotation_range=30,
					shear_range=0.3,
					zoom_range=0.3,
					width_shift_range=0.4,
					height_shift_range=0.4,
					horizontal_flip=True,
					fill_mode='nearest')

validation_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
					train_path,
					color_mode='grayscale',
					target_size=(img_rows,img_cols),
					batch_size=batch_size,
					class_mode='categorical',
					shuffle=True)

validation_generator = validation_datagen.flow_from_directory(
							validation_path,
							color_mode='grayscale',
							target_size=(img_rows,img_cols),
							batch_size=batch_size,
							class_mode='categorical',
							shuffle=True)

model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3) ,padding='same', activation='relu',input_shape=(48, 48, 1)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3),padding='same', activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3),padding='same', activation='relu'))

model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(5))
model.add(layers.BatchNormalization())
model.add(layers.Activation('softmax'))


model.summary()

"""***Compile and train the model***"""

from keras.optimizers import RMSprop,SGD,Adam
model.compile(loss='categorical_crossentropy', optimizer='adam',metrics=['accuracy'])

nb_train_samples = 24176
nb_validation_samples = 3006


model.fit(train_generator,
                
                    epochs=30,
                    validation_data=validation_generator,
                    validation_steps=validation_generator.samples // batch_size)

"""***Evaluate the model***"""

plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0.5, 2])
plt.legend(loc='lower right')

test_loss, test_acc = model.evaluate(validation_generator,verbose=2)

print(test_acc)